#load("@rules_rust//proto/protobuf:defs.bzl", "rust_proto_library")
load("@crate_index//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_test")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_oci//oci:defs.bzl", "oci_image")

#proto_library(
#    name = "torresix",
#    srcs = ["proto/torresix.proto"]
#)

#rust_proto_library(
#    name = "rust_torresix",
#    deps = [":torresix"],
#)

package(default_visibility = ["//visibility:public"])

rust_binary(
    name = "graphql",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(),
    deps = [
        #":rust_torresix",
    ] + all_crate_deps(
        normal = True,
    ),
    proc_macro_deps = all_crate_deps(
        proc_macro = True,
    ),
    visibility = ["//visibility:public"],
)

rust_test(
    name = "graphql_test",
    crate = ":graphql",
    deps = all_crate_deps(
        normal = True,
    ),
    proc_macro_deps = all_crate_deps(
        proc_macro = True,
    ),
)

# Compress graphql to layer
pkg_tar(
    name = "graphql_layer",
    srcs = [":graphql"],
)

# Build OCI image
oci_image(
    name = "graphql_image",
    architecture = select({
        "@platforms//cpu:arm64": "arm64",
        "@platforms//cpu:x86_64": "amd64",
    }),
    base = "@distroless_cc",
    tars = [":graphql_layer"],
    entrypoint = ["/graphql"],
    os = "linux",
)
